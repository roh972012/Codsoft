# -*- coding: utf-8 -*-
"""Titanic_survival_predication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jXRZZBWCQGzZzWneRkbibFghCXq0KuiC

Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""DATASET"""

data_f = pd.read_csv('/content/archive (2).zip')

data_f.head()

data_f.shape

data_f.isnull().sum()

"""we have to fill the missing values"""

data_f['Age'].fillna(data_f['Age'].mean(),inplace=True)

data_f.describe()

data_f['Survived'].value_counts()

sns.set()

"""Here We Plot the Survived and Non Survived Person on the ship
0:NON SURVIVED
1:SURVIVED
"""

sns.countplot(x=data_f['Survived'],hue=data_f['Survived'])

"""Here we compare on the basis of Gender
That In Non survived Section how many Males and Female.Also For the Survived Section Also
"""

data_f['Sex'].value_counts()

sns.countplot(x=data_f['Survived'],hue=data_f['Sex'])

"""Encode the Category"""

data_f['Sex'].unique()

from sklearn.preprocessing import LabelEncoder
labelencoder=LabelEncoder()
data_f['Sex']=labelencoder.fit_transform(data_f['Sex'])
data_f.head()

data_f['Embarked'].unique()

from sklearn.preprocessing import LabelEncoder
labelencoder=LabelEncoder()
data_f['Embarked']=labelencoder.fit_transform(data_f['Embarked'])
data_f.head()

"""Model training"""

x= data_f.drop(columns = ['PassengerId','Name','Fare','Cabin','Survived','Ticket'],axis=1)

print(x)

y=data_f['Survived']

print(y)

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=2)

print(x.shape,x_train.shape,x_test.shape)

logic = LogisticRegression(random_state = 2)
logic.fit(x_train, y_train)

x_train_prediction = logic.predict(x_train)
print(x_train_prediction)

"""Accuracy Score to find the model's efficiencey"""

training_data_accuracy = accuracy_score(y_train, x_train_prediction)
print('Accuracy score:' ,training_data_accuracy)

x_test_prediction = logic.predict(x_test)
print(x_test_prediction)

print(y_test)

import warnings
warnings.filterwarnings("ignore")
res= logic.predict([[3,1,22.000000,1,0,2]])
if(res==0):
  print("not survived")
else:
  print("survived")

